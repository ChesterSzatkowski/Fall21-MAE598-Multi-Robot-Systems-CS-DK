%% Modified the following MATLAB examples:
% https://www.mathworks.com/help/robotics/ug/path-planning-in-environments-of-difference-complexity.html
% https://www.mathworks.com/help/robotics/ug/path-following-for-differential-drive-robot.html

%% Initialize Video
%myVideo = VideoWriter('myVideoFile'); %open video file
%myVideo.FrameRate = 10;  %can adjust this, 5 - 10 works well for me
%open(myVideo)

%% Creating a map

warehouseMap = readmatrix('map.txt'); % Matrix where 1 represents an obstacle and 0 represents a free space

map = binaryOccupancyMap(warehouseMap,1); % 1 cell per meter
% show(map)

robotRadius = 0.6; % pallet unit is assumed to be circles of radius 0.6 meters

mapInflated = copy(map);
inflate(mapInflated,robotRadius); % to account for robot's dimension and ensure no collisions occur

% show(mapInflated)

prm = mobileRobotPRM; % define a path planner

prm.Map = mapInflated; % assign map to path planner
prm.NumNodes = 100; % number of randomly sampled nodes in free space
prm.ConnectionDistance = 20; % maximum line that connects any two nodes; increasing can increase computation time

startLocation = [20, 38];
endLocation = [20, 2];

path = findpath(prm, startLocation, endLocation); % solve the path

% show(prm) % display nodes, connections, and final path

%% Path Following for a two-wheeled differential-drive robot
% Robot will follow the path generated by the PRM in previous section

% initialize robot's path and initial orientation
robotInitialLocation = path(1,:);
robotGoal = path(end,:);

initialOrientation = 0; % (angle between robot heading and +x-axis (CCW)

robotCurrentPose = [robotInitialLocation initialOrientation]';

% Initialize the robot with kinematic equations for motion
% The robot's inputs are linear and angular velocities

% define robot parameters; wheel radius = 0.05m, track width = 1m, and
% inputs are speed and heading angle
robot = differentialDriveKinematics("TrackWidth", 1, "VehicleInputs", "VehicleSpeedHeadingRate");

% plot desired path
% figure
% plot(path(:,1), path(:,2),'k--d')
% xlim([0 40])
% ylim([0 40])

% define path following controller

controller = controllerPurePursuit;
controller.Waypoints = path;
controller.DesiredLinearVelocity = .6;
controller.MaxAngularVelocity = 2;
controller.LookaheadDistance = .3;

goalRadius = 0.2;
distanceToGoal = norm(robotInitialLocation - robotGoal);

% Initialize the simulation loop
sampleTime = 0.1;
vizRate = rateControl(1/sampleTime);

% Initialize the figure
figure

% Determine vehicle frame size to most closely represent vehicle with plotTransforms
frameSize = robot.TrackWidth/0.8;

while( distanceToGoal > goalRadius )
    
    % Compute the controller outputs, i.e., the inputs to the robot
    [v, omega] = controller(robotCurrentPose);
    
    % Get the robot's velocity using controller inputs
    vel = derivative(robot, robotCurrentPose, [v omega]);
    
    % Update the current pose
    robotCurrentPose = robotCurrentPose + vel*sampleTime; 
    
    % Re-compute the distance to the goal
    distanceToGoal = norm(robotCurrentPose(1:2) - robotGoal(:));
    
    % Update the plot
    hold off
    
    % Plot path each instance so that it stays persistent while robot mesh
    % moves
    plot(path(:,1), path(:,2),"k--d")
    hold all
    
    % Plot the path of the robot as a set of transforms
    plotTrVec = [robotCurrentPose(1:2); 0];
    plotRot = axang2quat([0 0 1 robotCurrentPose(3)]);
    plotTransforms(plotTrVec', plotRot, "MeshFilePath", "groundvehicle.stl", "Parent", gca, "View","2D", "FrameSize", frameSize);
    light;
    xlim([0 40])
    ylim([0 40])
    set(gcf, 'Position',  [100, 100, 1000, 850])
    %pause(0.01)
    %frame = getframe(gcf);
    %writeVideo(myVideo, frame);
    
    waitfor(vizRate);
end
%close(myVideo);
